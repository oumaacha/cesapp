
@{
	ViewData["Title"] = "Tableau de bord";
}
<div class="container">
	<div>
		<a asp-action="ConsommationDashboard" asp-controller="Dashboard" class="btn btn-sm btn-warning">Consommation</a>
		<a asp-action="RondementDashboard" asp-controller="Dashboard" class="btn btn-sm btn-success">Rodement</a>
	</div>
	<div class="row">
		<div class="d-flex justify-content-between align-items-center">
			<div class="w-75">
				<canvas class="w-auto" id="barChart"></canvas>
			</div>

			<div>
				<canvas class="w-auto" id="doughnutChart"></canvas>
			</div>
		</div>
	</div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>

	document.addEventListener("DOMContentLoaded", () => {
		retrieveConsommationData()
	})
	/********************************************************** */
	const chargesByTypeData = [];
	monthsInFrench = [
		'Janvier',
		'Février',
		'Mars',
		'Avril',
		'Mai',
		'Juin',
		'Juillet',
		'Août',
		'Septembre',
		'Octobre',
		'Novembre',
		'Décembre'
	];
	let groupedConsommationData = []
	let keysByTypeData = [];
	function retrieveConsommationData() {
		fetch("/Consommation/MachinesConsommationData")
			.then(response => response.json())
			.then(data => {
				for (const key in data) {
					chargesByTypeData.push(data[key])
					keysByTypeData.push(key)
				}
				showDoughnutChart(chargesByTypeData, keysByTypeData)
			})
			.catch(err => console.log(err))
		fetch("/Consommation/MachinesConsommationDataBars")
			.then(response => response.json())
			.then(data => {
				for (const key in data) {
					let keys = key.split("_")
					let month = keys[0]
					let charge = keys[1]
					let value = data[key]

					if (!groupedConsommationData[charge]) {
						groupedConsommationData[charge] = [];
					}

					groupedConsommationData[charge].push({ month, value });
				}
				let datasets = []
				let chargesdata = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
				for (let d in groupedConsommationData) {
					chargesdata = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
					for (let dd of groupedConsommationData[d]) {
						chargesdata[dd.month - 1] = dd.value
					}
					datasets.push({
						label: d,
						data: chargesdata,
						borderWidth: 1
					})
				}
				console.log(datasets)
				showBarChart(datasets, monthsInFrench)
			})
			.catch(err => console.log(err))
	}

	let consommationBarChart = null
	function showBarChart(datasets, keys) {
		const ctx = document.getElementById('barChart');
		if (consommationBarChart) {
			consommationBarChart.destroy()
		}
		consommationBarChart = new Chart(ctx, {
			type: 'bar',
			data: {
				labels: keys,
				datasets: datasets
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				}
			}
		});
	}
	let consommationDoughnutChart = null
	function showDoughnutChart(data, keys) {
		const ctx = document.getElementById('doughnutChart');
		if (consommationDoughnutChart) {
			consommationDoughnutChart.destroy()
		}
		consommationDoughnutChart = new Chart(ctx, {
			type: 'pie',
			data: {
				labels: keys,
				datasets: [{
					label: 'Consommation en DH',
					data: data,
					borderWidth: 1
				}]
			},
			options: {
				scales: {
					y: {
						beginAtZero: true
					}
				},
				plugins: {
					datalabels: {
						formatter: function (value, context) {
							return value; // Display the data value as the label
						},
						color: 'red', // Label text color
						font: {
							size: 14, // Label font size
							weight: 'bold' // Label font weight
						}
					}
				}
			}
		});
	}
</script>